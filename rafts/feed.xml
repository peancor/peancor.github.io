<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-22T19:48:52+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">la ciudadela</title><subtitle>Blog personal de Pedro Anuarbe Cortes (@peancor)
</subtitle><author><name>peancor</name></author><entry><title type="html">Autómata celular de una dimensión</title><link href="http://localhost:4000/2012/04/22/automata-celular-de-una-dimension.html" rel="alternate" type="text/html" title="Autómata celular de una dimensión" /><published>2012-04-22T00:00:00+02:00</published><updated>2012-04-22T00:00:00+02:00</updated><id>http://localhost:4000/2012/04/22/automata-celular-de-una-dimension</id><content type="html" xml:base="http://localhost:4000/2012/04/22/automata-celular-de-una-dimension.html">&lt;p&gt;En general, los sistemas pueden presentar uno de los siguientes tipos de comportamiento:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;estabilidad&lt;/li&gt;
	&lt;li&gt;periodicidad&lt;/li&gt;
	&lt;li&gt;caos&lt;/li&gt;
	&lt;li&gt;complejidad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los autómatas celulares en una dimensión fueron explorados ampliamente en el libro ‘a new kind of science’ de Stephen Wolfram.&lt;/p&gt;

&lt;p&gt;El estado de dichos autómatas consiste en un vector de valores binarios. En cada cambio de estado del autómata, cada valor cambia en función de su estado actual y de sus ‘vecinos’. Existen 256 variantes de estos autómatas que se definen cada una por una regla.&lt;/p&gt;

&lt;p&gt;Estos autómatas presentan variantes con los cuatro tipos de comportamiento mencionados anteriormente.&lt;/p&gt;

&lt;h6 id=&quot;estabilidad&quot;&gt;Estabilidad&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;/images/12/rule-251.png&quot;&gt;&lt;img class=&quot;size-full wp-image-410&quot; title=&quot;rule 251&quot; alt=&quot;&quot; src=&quot;/images/12/rule-251.png&quot; width=&quot;441&quot; height=&quot;287&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;periodicidad&quot;&gt;Periodicidad&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;/images/12/rule-1.png&quot;&gt;&lt;img class=&quot;size-full wp-image-411&quot; title=&quot;rule 1&quot; alt=&quot;&quot; src=&quot;/images/12/rule-1.png&quot; width=&quot;432&quot; height=&quot;292&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;caos&quot;&gt;Caos&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;/images/12/rule-45.png&quot;&gt;&lt;img class=&quot;size-full wp-image-413&quot; title=&quot;rule 45&quot; alt=&quot;&quot; src=&quot;/images/12/rule-45.png&quot; width=&quot;406&quot; height=&quot;260&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;complejidad&quot;&gt;complejidad&lt;/h6&gt;
&lt;p&gt;&lt;a href=&quot;/images/12/rule-110.png&quot;&gt;&lt;img class=&quot;size-full wp-image-414&quot; title=&quot;rule 110&quot; alt=&quot;&quot; src=&quot;/images/12/rule-110.png&quot; width=&quot;428&quot; height=&quot;285&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Programa para representar automatas celulares 1D:&lt;/h2&gt;
&lt;p&gt;En el programa siguiente puede seleccionar la regla del autómata a representar utilizando el slider. Es necesario javascript y un navegador moderno.&lt;/p&gt;

&lt;iframe src=&quot;/sites/processing/ca1d.html&quot; width=&quot;500px&quot; height=&quot;400px&quot;&gt;&lt;/iframe&gt;</content><author><name>peancor</name></author><summary type="html">En general, los sistemas pueden presentar uno de los siguientes tipos de comportamiento: estabilidad periodicidad caos complejidad Los autómatas celulares en una dimensión fueron explorados ampliamente en el libro ‘a new kind of science’ de Stephen Wolfram. El estado de dichos autómatas consiste en un vector de valores binarios. En cada cambio de estado del autómata, cada valor cambia en función de su estado actual y de sus ‘vecinos’. Existen 256 variantes de estos autómatas que se definen cada una por una regla. Estos autómatas presentan variantes con los cuatro tipos de comportamiento mencionados anteriormente. Estabilidad Periodicidad Caos complejidad Programa para representar automatas celulares 1D: En el programa siguiente puede seleccionar la regla del autómata a representar utilizando el slider. Es necesario javascript y un navegador moderno.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2212/rule-45.png%22,%20%22homepage%22=%3E%2212/rule-45.png%22%7D" /></entry><entry><title type="html">La regla del 72</title><link href="http://localhost:4000/2012/04/19/la-regla-del-72.html" rel="alternate" type="text/html" title="La regla del 72" /><published>2012-04-19T00:00:00+02:00</published><updated>2012-04-19T00:00:00+02:00</updated><id>http://localhost:4000/2012/04/19/la-regla-del-72</id><content type="html" xml:base="http://localhost:4000/2012/04/19/la-regla-del-72.html">&lt;p&gt;La regla del 72 permite calcular ‘de cabeza’ cuanto tarda en duplicarse una cantidad rentando a un determinado interés.&lt;/p&gt;

&lt;p&gt;La regla consiste en dividir 72 entre el interés para obtener el tiempo que tarda en duplicarse la cantidad. En el caso de interés anual obtendremos directamente el número de años que tardaría en duplicarse la cantidad.&lt;/p&gt;

&lt;p&gt;Supongamos que tenemos determinada cantidad al 4% de interés compuesto anual. El número de años que tardará en duplicarse esa cantidad será:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\frac{72}{4} = 18
\end{equation}&lt;/p&gt;

&lt;p&gt;Si lo comparamos con el cálculo exacto observamos que el error es pequeño:&lt;/p&gt;

&lt;p&gt;\begin{equation}
2={\left(1+\frac{4}{100}\right)}^n
\end{equation}
\begin{equation}
n\approx17.6
\end{equation}&lt;/p&gt;

&lt;p&gt;El siguiente gráfico compara el valor real con el valor obtenido por la regla del 72 para diferentes tipos de interés.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/12/regla-del-72.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-390&quot; title=&quot;regla del 72&quot; src=&quot;/images/12/regla-del-72.png&quot; alt=&quot;&quot; width=&quot;839&quot; height=&quot;609&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">La regla del 72 permite calcular ‘de cabeza’ cuanto tarda en duplicarse una cantidad rentando a un determinado interés. La regla consiste en dividir 72 entre el interés para obtener el tiempo que tarda en duplicarse la cantidad. En el caso de interés anual obtendremos directamente el número de años que tardaría en duplicarse la cantidad. Supongamos que tenemos determinada cantidad al 4% de interés compuesto anual. El número de años que tardará en duplicarse esa cantidad será: \begin{equation} \frac{72}{4} = 18 \end{equation} Si lo comparamos con el cálculo exacto observamos que el error es pequeño: \begin{equation} 2={\left(1+\frac{4}{100}\right)}^n \end{equation} \begin{equation} n\approx17.6 \end{equation} El siguiente gráfico compara el valor real con el valor obtenido por la regla del 72 para diferentes tipos de interés.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2212/regla-del-72.png%22%7D" /></entry><entry><title type="html">Aplicación de registro climático basada en ASP.NET MVC 4</title><link href="http://localhost:4000/2012/04/15/aplicacion-registro-climatico-aspnet4.html" rel="alternate" type="text/html" title="Aplicación de registro climático basada en ASP.NET MVC 4" /><published>2012-04-15T00:00:00+02:00</published><updated>2012-04-15T00:00:00+02:00</updated><id>http://localhost:4000/2012/04/15/aplicacion-registro-climatico-aspnet4</id><content type="html" xml:base="http://localhost:4000/2012/04/15/aplicacion-registro-climatico-aspnet4.html">&lt;p&gt;En este artículo se describe una aplicación web basada en ASP.NET MVC 4 que obtiene datos de la&lt;a title=&quot;Estación meteorológica digital usb con arduino&quot; href=&quot;http://www.laciudadela.net/2012/04/14/estacion-meteorologica-digital-usb-con-arduino/&quot;&gt; estación meteorológica usb&lt;/a&gt; descrita en el artículo anterior permitiendo su análisis. El resultado se muestra en la siguiente imagen:
&lt;a href=&quot;/images/12/grafico-registro-estación-climática.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-266&quot; title=&quot;gráfico registro estación climática usb&quot; src=&quot;/images/12/grafico-registro-estación-climática.png&quot; alt=&quot;&quot; width=&quot;823&quot; height=&quot;621&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En primer lugar se modelan los datos. En este caso se ha definido una tabla con seis campos, el primero para la fecha de obtención de la medición y los cinco restantes para cada uno de los valores que retorna el sistema.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/12/image.png&quot;&gt;&lt;img style=&quot;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border-width: 0px;&quot; title=&quot;modelo de datos sensor estación meteorológica&quot; src=&quot;/images/12/image_thumb.png&quot; alt=&quot;modelo de datos sensor estación meteorológica&quot; width=&quot;166&quot; height=&quot;221&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Necesitamos obtener datos de los sensores de forma periódica y para ello utilizaremos &lt;a href=&quot;http://quartznet.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Quarz.net&lt;/a&gt;. La instalación de Quartz.net se realiza utilizando Nuget desde el propio Visual Studio 11. Para representar gráficos instalaremos también &lt;a href=&quot;http://dotnethighcharts.codeplex.com/&quot; target=&quot;_blank&quot;&gt;DotNet.HighCharts&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Package Manager Console Host Version 1.7.30402.9028
Type &lt;span class=&quot;s1&quot;&gt;'get-help NuGet'&lt;/span&gt; to see all available NuGet commands.
PM&amp;amp;gt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Install-Package Quartz
Attempting to resolve dependency &lt;span class=&quot;s1&quot;&gt;'Common.Logging (≥ 2.0.0)'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully installed &lt;span class=&quot;s1&quot;&gt;'Common.Logging 2.0.0'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully installed &lt;span class=&quot;s1&quot;&gt;'Quartz 2.0.0'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully added &lt;span class=&quot;s1&quot;&gt;'Common.Logging 2.0.0'&lt;/span&gt; to MvcApplication1.
Successfully added &lt;span class=&quot;s1&quot;&gt;'Quartz 2.0.0'&lt;/span&gt; to MvcApplication1.
PM&amp;amp;gt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Install-Package DotNet.Highcharts
Successfully installed &lt;span class=&quot;s1&quot;&gt;'DotNet.Highcharts 1.2'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully added &lt;span class=&quot;s1&quot;&gt;'DotNet.Highcharts 1.2'&lt;/span&gt; to MvcApplication1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación en el fichero global.asax configuraremos una tarea periódica que se ejecute cada minuto con el objetivo de obtener datos de los sensores y almacenarlos en la base de datos.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ScheduleReadSensor0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedFact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StdSchedulerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get a scheduler&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedFact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// construct job info&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleScheduleBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RepeatSecondlyForever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TriggerBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WithSchedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobDetailImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadSensorsJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ScheduleJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La tarea simplemente obtiene datos del sensor y les almacena.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadSensors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor0PortName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Si el puerto serie existe leemos&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetPortNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerialPort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SerialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadTimeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DtrEnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;|&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringSplitOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveEmptyEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToSingle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Si todo ha ido bien almacenamos los datos&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Almacenamos los datos en la base de datos&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SantuarioEntities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sensor0Readings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Temperature1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Temperature2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Pressure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Humidity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Luminance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor0Readings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por defecto los procesos ASP.NET se detienen pasados 20 minutos de inactividad por lo que un primer paso para que el registro se produzca de manera continua es aumentar ese límite. Para ello en la configuración de IIS, dentro de la configuración avanzada del grupo de aplicaciones establecemos el valor a 0, que significa indefinido.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/12/aumentar-tiempo-keep-alive-in-asp.net_.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-273&quot; title=&quot;aumentar tiempo keep-alive in asp.net&quot; src=&quot;/images/12/aumentar-tiempo-keep-alive-in-asp.net_.png&quot; alt=&quot;&quot; width=&quot;526&quot; height=&quot;174&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aun así, por diversas razones el proceso se podría detener por lo que es recomendable configurar una tarea periódica que solicite una página al servidor provocando su arranque en caso de que esté detenido.&lt;/p&gt;

&lt;p&gt;Ya solo queda implementar un controlador y una vista de ASP.NET MVC que se encargue de obtener los datos y representarles.&lt;/p&gt;

&lt;p&gt;Se ha implementado una acción de controlador cuya lógica se divide en obtener los datos y generar un gráfico a partir de ellos.&lt;/p&gt;

&lt;p&gt;La parte de obtención de los datos:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//span define el tamaño en minutos de cada intervalo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//nSpan el número de intervalos a representar&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor0Readings&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;orderby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;descending&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Si no hay medidas o la medida es muy vieja&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desconocida&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMinutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;º&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperature1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humidity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pressure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pressure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Obtenemos datos de los ultimos n mins&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limitPoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressures&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;humidities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Establecemos los puntos limite&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSpan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;limitPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Obtenemos los datos para los intervalos&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upperLimit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limitPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowerLimit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limitPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measurements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor0Readings&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upperLimit&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowerLimit&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measurements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measurements&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pressure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measurements&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperature1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;hAverage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measurements&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intervalLabel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limitPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervalLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pressures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;humidities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pressures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;humidities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y el código de la parte de generación del gráfico:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Highcharts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Highcharts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InitChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZoomType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZoomTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Registro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clim&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;á&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tico&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetSubtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subtitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;citadel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetXAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAxis&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AxisTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetYAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxisLabels&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'°&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A54E&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAxisTitle&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperatura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A54E&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Opposite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxisLabels&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4572&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAxisTitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humedad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4572&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;GridLineWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAxisLabels&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AA4643&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAxisTitle&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Presi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AA4643&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;GridLineWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Opposite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetTooltip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tooltip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TooltipFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJavascripFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TooltipFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                            &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humedad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativa&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperatura&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'°&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Presi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;xDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetPlotOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Spline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptionsSpline&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Marker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptionsLineMarker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LineWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DashStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DashStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShortDot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PointInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3600000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PointStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PointStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptionsColumn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PointInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3600000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PointStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PointStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetSeries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Humedad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorTranslator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;804572&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChartTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;humidities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Presi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorTranslator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AA4643&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChartTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Temperatura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorTranslator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A54E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChartTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;PlotOptionsSpline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptionsSpline&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;Marker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlotOptionsLineMarker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;LineWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;DashStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DashStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;PointInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3600000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;PointStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PointStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por último, la vista quedaría:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@{
    ViewBag.Title = &lt;span class=&quot;ni&quot;&gt;&amp;amp;quot;&lt;/span&gt;Sensor0&lt;span class=&quot;ni&quot;&gt;&amp;amp;quot;&lt;/span&gt;;
}

@model DotNet.Highcharts.Highcharts&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/pre&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;h2&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;Estado (Actualizado hace @ViewBag.ElapsedMinutes minutos)&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/h2&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;dl&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;Temperatura actual:&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;@ViewBag.Temperature&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;Humedad:&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;@ViewBag.Humidity&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;Presión atmosférica:&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dt&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;@ViewBag.Pressure&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/dd&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/dl&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;pre&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;
@Model
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>peancor</name></author><summary type="html">En este artículo se describe una aplicación web basada en ASP.NET MVC 4 que obtiene datos de la estación meteorológica usb descrita en el artículo anterior permitiendo su análisis. El resultado se muestra en la siguiente imagen: En primer lugar se modelan los datos. En este caso se ha definido una tabla con seis campos, el primero para la fecha de obtención de la medición y los cinco restantes para cada uno de los valores que retorna el sistema. Necesitamos obtener datos de los sensores de forma periódica y para ello utilizaremos Quarz.net. La instalación de Quartz.net se realiza utilizando Nuget desde el propio Visual Studio 11. Para representar gráficos instalaremos también DotNet.HighCharts. Package Manager Console Host Version 1.7.30402.9028 Type 'get-help NuGet' to see all available NuGet commands. PM&amp;amp;gt; Install-Package Quartz Attempting to resolve dependency 'Common.Logging (≥ 2.0.0)'. Successfully installed 'Common.Logging 2.0.0'. Successfully installed 'Quartz 2.0.0'. Successfully added 'Common.Logging 2.0.0' to MvcApplication1. Successfully added 'Quartz 2.0.0' to MvcApplication1. PM&amp;amp;gt; Install-Package DotNet.Highcharts Successfully installed 'DotNet.Highcharts 1.2'. Successfully added 'DotNet.Highcharts 1.2' to MvcApplication1. A continuación en el fichero global.asax configuraremos una tarea periódica que se ejecute cada minuto con el objetivo de obtener datos de los sensores y almacenarlos en la base de datos. void ScheduleReadSensor0() { var schedFact = new StdSchedulerFactory(); // get a scheduler IScheduler sched = schedFact.GetScheduler(); sched.Start(); // construct job info var schedule = SimpleScheduleBuilder.RepeatSecondlyForever(60); var trigger = TriggerBuilder.Create().StartNow().WithSchedule(schedule).Build(); var job = new JobDetailImpl(&amp;amp;quot;Sensors&amp;amp;quot;, typeof(Jobs.ReadSensorsJob)); sched.ScheduleJob(job, trigger); } La tarea simplemente obtiene datos del sensor y les almacena. void ReadSensors() { var portName = Properties.Settings.Default.Sensor0PortName; //Si el puerto serie existe leemos if (SerialPort.GetPortNames().Contains(portName)) { using (SerialPort port = new SerialPort(portName, 9600)) { port.ReadTimeout = 5000; port.DtrEnable = false; port.Open(); port.Write(&amp;amp;quot;g&amp;amp;quot;); var line = port.ReadLine(); var vals = (from v in line.Split(&amp;amp;quot;|&amp;amp;quot;.ToCharArray(), StringSplitOptions.RemoveEmptyEntries) select XmlConvert.ToSingle(v)).ToArray(); //Si todo ha ido bien almacenamos los datos Store(vals[0], vals[1], vals[2], vals[3], vals[4]); } } } void Store(Single t1, Single h, Single l, Single p, Single t2) { //Almacenamos los datos en la base de datos using (var db= new SantuarioEntities()) { var sr = new Sensor0Readings() { TimeStamp = DateTime.Now, Temperature1 = t1, Temperature2 = t2, Pressure = p, Humidity = h, Luminance = l }; db.Sensor0Readings.AddObject(sr); db.SaveChanges(); } } Por defecto los procesos ASP.NET se detienen pasados 20 minutos de inactividad por lo que un primer paso para que el registro se produzca de manera continua es aumentar ese límite. Para ello en la configuración de IIS, dentro de la configuración avanzada del grupo de aplicaciones establecemos el valor a 0, que significa indefinido. Aun así, por diversas razones el proceso se podría detener por lo que es recomendable configurar una tarea periódica que solicite una página al servidor provocando su arranque en caso de que esté detenido. Ya solo queda implementar un controlador y una vista de ASP.NET MVC que se encargue de obtener los datos y representarles. Se ha implementado una acción de controlador cuya lógica se divide en obtener los datos y generar un gráfico a partir de ellos. La parte de obtención de los datos: //span define el tamaño en minutos de cada intervalo //nSpan el número de intervalos a representar if (endTime == null) endTime = DateTime.Now; var lastMeasure = (from m in db.Sensor0Readings where m.TimeStamp &amp;amp;lt;= endTime.Value orderby m.TimeStamp descending select m).FirstOrDefault(); //Si no hay medidas o la medida es muy vieja if (lastMeasure == null || (endTime.Value - lastMeasure.TimeStamp) &amp;amp;gt; TimeSpan.FromMinutes(60)) { ViewBag.Temperature = &amp;amp;quot;Desconocida&amp;amp;quot;; } else { ViewBag.ElapsedMinutes = (endTime.Value - lastMeasure.TimeStamp).TotalMinutes.ToString(&amp;amp;quot;F0&amp;amp;quot;); ViewBag.Temperature = string.Format(&amp;amp;quot;{0:F1} ºC&amp;amp;quot;, lastMeasure.Temperature1); ViewBag.Humidity = string.Format(&amp;amp;quot;{0:F1} %&amp;amp;quot;, lastMeasure.Humidity); ViewBag.Pressure = string.Format(&amp;amp;quot;{0:F1} mb&amp;amp;quot;, lastMeasure.Pressure); } //Obtenemos datos de los ultimos n mins List&amp;amp;lt;DateTime&amp;amp;gt; limitPoints = new List&amp;amp;lt;DateTime&amp;amp;gt;(); List&amp;amp;lt;DateTime&amp;amp;gt; intervals = new List&amp;amp;lt;DateTime&amp;amp;gt;(); List&amp;amp;lt;object&amp;amp;gt; pressures = new List&amp;amp;lt;object&amp;amp;gt;(); List&amp;amp;lt;object&amp;amp;gt; temperatures = new List&amp;amp;lt;object&amp;amp;gt;(); List&amp;amp;lt;object&amp;amp;gt; humidities = new List&amp;amp;lt;object&amp;amp;gt;(); //Establecemos los puntos limite for (int i = 0; i &amp;amp;lt; nSpan + 1; i++) { limitPoints.Add(endTime.Value - TimeSpan.FromMinutes(i * span)); } //Obtenemos los datos para los intervalos for (int i = 0; i &amp;amp;lt; nSpan; i++) { var upperLimit = limitPoints[i]; var lowerLimit = limitPoints[i + 1]; var measurements = (from m in db.Sensor0Readings where m.TimeStamp &amp;amp;lt; upperLimit where m.TimeStamp &amp;amp;gt;= lowerLimit select m).ToArray(); double pAverage = 0; double tAverage = 0; double hAverage = 0; if (measurements.Length &amp;amp;gt; 0) { pAverage = (from p in measurements select p.Pressure).Average(); tAverage = (from p in measurements select p.Temperature1).Average(); hAverage = (from p in measurements select p.Humidity).Average(); } var intervalLabel = limitPoints[i] - TimeSpan.FromMinutes(0.5 * span); intervals.Add(intervalLabel); pressures.Add(pAverage); temperatures.Add(tAverage); humidities.Add(hAverage); } intervals.Reverse(); pressures.Reverse(); temperatures.Reverse(); humidities.Reverse(); Y el código de la parte de generación del gráfico: Highcharts chart = new Highcharts(&amp;amp;quot;chart&amp;amp;quot;) .InitChart(new Chart { ZoomType = ZoomTypes.Xy }) .SetTitle(new Title { Text = &amp;amp;quot;Registro climático&amp;amp;quot; }) .SetSubtitle(new Subtitle { Text = &amp;amp;quot;citadel labs&amp;amp;quot; }) .SetXAxis(new XAxis { Type = AxisTypes.Datetime, }) .SetYAxis(new[] { new YAxis { Labels = new YAxisLabels { Formatter = &amp;amp;quot;function() { return this.value +'°C'; }&amp;amp;quot;, Style = &amp;amp;quot;color: '#89A54E'&amp;amp;quot; }, Title = new XAxisTitle { Text = &amp;amp;quot;Temperatura&amp;amp;quot;, Style = &amp;amp;quot;color: '#89A54E'&amp;amp;quot; }, Opposite = true, }, new YAxis { Labels = new YAxisLabels { Formatter = &amp;amp;quot;function() { return this.value +' %'; }&amp;amp;quot;, Style = &amp;amp;quot;color: '#4572A7'&amp;amp;quot; }, Title = new XAxisTitle { Text = &amp;amp;quot;Humedad relativa&amp;amp;quot;, Style = &amp;amp;quot;color: '#4572A7'&amp;amp;quot; }, GridLineWidth = 0 }, new YAxis { Labels = new YAxisLabels { Formatter = &amp;amp;quot;function() { return this.value +' mb'; }&amp;amp;quot;, Style = &amp;amp;quot;color: '#AA4643'&amp;amp;quot; }, Title = new XAxisTitle { Text = &amp;amp;quot;Presión&amp;amp;quot;, Style = &amp;amp;quot;color: '#AA4643'&amp;amp;quot; }, GridLineWidth = 0, Opposite = true } }) .SetTooltip(new Tooltip { Formatter = &amp;amp;quot;TooltipFormatter&amp;amp;quot; }) .AddJavascripFunction(&amp;amp;quot;TooltipFormatter&amp;amp;quot;, @&amp;amp;quot;var unit = { 'Humedad relativa': '%', 'Temperatura': '°C', 'Presión': 'mb' }[this.series.name]; var xDate = new Date(this.x); return ''+ xDate+': '+ this.y.toFixed(2) +' '+ unit;&amp;amp;quot;) .SetPlotOptions(new PlotOptions { Spline = new PlotOptionsSpline { Marker = new PlotOptionsLineMarker { Enabled = false }, LineWidth = 3, DashStyle = DashStyles.ShortDot, PointInterval = 3600000, PointStart = new PointStart(intervals[0]) }, Column = new PlotOptionsColumn { PointInterval = 3600000, PointStart = new PointStart(intervals[0]) } }) .SetSeries(new[] { new Series { Name = &amp;amp;quot;Humedad relativa&amp;amp;quot;, Color = ColorTranslator.FromHtml(&amp;amp;quot;#804572A7&amp;amp;quot;), Type = ChartTypes.Column, YAxis = 1, Data = new Data(humidities.ToArray()) }, new Series { Name = &amp;amp;quot;Presión&amp;amp;quot;, Color = ColorTranslator.FromHtml(&amp;amp;quot;#AA4643&amp;amp;quot;), Type = ChartTypes.Spline, YAxis = 2, Data = new Data(pressures.ToArray()), }, new Series { Name = &amp;amp;quot;Temperatura&amp;amp;quot;, Color = ColorTranslator.FromHtml(&amp;amp;quot;#89A54E&amp;amp;quot;), Type = ChartTypes.Spline, PlotOptionsSpline = new PlotOptionsSpline { Marker = new PlotOptionsLineMarker { Enabled = false }, LineWidth = 3, DashStyle = DashStyles.Solid, PointInterval = 3600000, PointStart = new PointStart(intervals[0]) }, Data = new Data(temperatures.ToArray()) } }); Por último, la vista quedaría: @{ ViewBag.Title = &amp;amp;quot;Sensor0&amp;amp;quot;; } @model DotNet.Highcharts.Highcharts&amp;amp;lt;/pre&amp;amp;gt; &amp;amp;lt;h2&amp;amp;gt;Estado (Actualizado hace @ViewBag.ElapsedMinutes minutos)&amp;amp;lt;/h2&amp;amp;gt; &amp;amp;lt;dl&amp;amp;gt;&amp;amp;lt;dt&amp;amp;gt;Temperatura actual:&amp;amp;lt;/dt&amp;amp;gt;&amp;amp;lt;dd&amp;amp;gt;@ViewBag.Temperature&amp;amp;lt;/dd&amp;amp;gt;&amp;amp;lt;dt&amp;amp;gt;Humedad:&amp;amp;lt;/dt&amp;amp;gt;&amp;amp;lt;dd&amp;amp;gt;@ViewBag.Humidity&amp;amp;lt;/dd&amp;amp;gt;&amp;amp;lt;dt&amp;amp;gt;Presión atmosférica:&amp;amp;lt;/dt&amp;amp;gt;&amp;amp;lt;dd&amp;amp;gt;@ViewBag.Pressure&amp;amp;lt;/dd&amp;amp;gt;&amp;amp;lt;/dl&amp;amp;gt; &amp;amp;lt;pre&amp;amp;gt; @Model</summary></entry><entry><title type="html">Estación meteorológica digital usb con arduino</title><link href="http://localhost:4000/2012/04/14/estacion-metereologica-arduino.html" rel="alternate" type="text/html" title="Estación meteorológica digital usb con arduino" /><published>2012-04-14T00:00:00+02:00</published><updated>2012-04-14T00:00:00+02:00</updated><id>http://localhost:4000/2012/04/14/estacion-metereologica-arduino</id><content type="html" xml:base="http://localhost:4000/2012/04/14/estacion-metereologica-arduino.html">&lt;p&gt;Utilizando un &lt;a href=&quot;http://arduino.cc/en/Main/ArduinoBoardNano&quot; target=&quot;_blank&quot;&gt;arduino nano&lt;/a&gt;, un módulo basado en el sensor &lt;a href=&quot;/files/datasheets/SHT1x_datasheet.pdf&quot;&gt;SHT15&lt;/a&gt; (temperatura y humedad), un módulo basado en el sensor &lt;a href=&quot;/files/datasheets/sensor_mm_1616_e.pdf&quot;&gt;MM1616&lt;/a&gt; (iluminancia), y un módulo basado basado en el sensor &lt;a href=&quot;/files/datasheets/12/MS5561C.pdf&quot;&gt;MS5561C&lt;/a&gt; (presión y temperatura) se ha construido un sistema que permite registrar las siguientes variables del entorno:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Temperatura&lt;/li&gt;
  &lt;li&gt;Presión atmosférica&lt;/li&gt;
  &lt;li&gt;Humedad&lt;/li&gt;
  &lt;li&gt;iluminancia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/images/12/2012-04-14-08.29.49.jpg&quot;&gt;&lt;img class=&quot; wp-image-177&quot; title=&quot;ensamblaje estación meteorológica digital usb con arduino&quot; src=&quot;/images/12/2012-04-14-08.29.49-1024x768.jpg&quot; alt=&quot;ensamblaje estación meteorológica digital usb con arduino&quot; width=&quot;584&quot; height=&quot;438&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El programa desarrollado para arduino proporciona un interface a través del puerto serie (9600 baudios). Al recibir el caracter ASCII ‘g’ el sistema obtiene medidas de cada uno de los sensores escribiendo sus valores en el puerto serie con el formato que se muestra en la siguiente figura:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/12/lectura-serie-estacion-meteorologica-digital-usb-arduino.png&quot;&gt;&lt;img class=&quot;size-full wp-image-194&quot; title=&quot;lectura estacion meteorologica digital usb arduino&quot; src=&quot;/images/12/lectura-serie-estacion-meteorologica-digital-usb-arduino.png&quot; alt=&quot;&quot; width=&quot;698&quot; height=&quot;446&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El orden de las mediciones el es siguiente:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Temperatura (ºC, SHT15)&lt;/li&gt;
	&lt;li&gt;Humedad (%)&lt;/li&gt;
	&lt;li&gt;Iluminancia (lux)&lt;/li&gt;
	&lt;li&gt;Presión atmosférica (mb)&lt;/li&gt;
	&lt;li&gt;Temperatura (MS5561C)&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

Código fuente: &lt;a href=&quot;/files/MeteoSys.zip&quot;&gt;Sketch Arduino para estación meteorológica&lt;/a&gt;
&lt;/div&gt;</content><author><name>peancor</name></author><summary type="html">Utilizando un arduino nano, un módulo basado en el sensor SHT15 (temperatura y humedad), un módulo basado en el sensor MM1616 (iluminancia), y un módulo basado basado en el sensor MS5561C (presión y temperatura) se ha construido un sistema que permite registrar las siguientes variables del entorno: Temperatura Presión atmosférica Humedad iluminancia El programa desarrollado para arduino proporciona un interface a través del puerto serie (9600 baudios). Al recibir el caracter ASCII ‘g’ el sistema obtiene medidas de cada uno de los sensores escribiendo sus valores en el puerto serie con el formato que se muestra en la siguiente figura: El orden de las mediciones el es siguiente: Temperatura (ºC, SHT15) Humedad (%) Iluminancia (lux) Presión atmosférica (mb) Temperatura (MS5561C) Código fuente: Sketch Arduino para estación meteorológica</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2212/2012-04-14-08.29.49-1024x768.jpg%22%7D" /></entry><entry><title type="html">Sensor de humedad y temperatura con Arduino. Tercera parte: HttpRelay</title><link href="http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-3.html" rel="alternate" type="text/html" title="Sensor de humedad y temperatura con Arduino. Tercera parte: HttpRelay" /><published>2010-04-04T00:00:00+02:00</published><updated>2010-04-04T00:00:00+02:00</updated><id>http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-3</id><content type="html" xml:base="http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-3.html">&lt;p&gt;Este artículo es una continuación de los siguientes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.laciudadela.net/content/2010-03-19/sensor-de-humedad-y-temperatura-con-arduino-primera-parte-el-hardware&quot;&gt;Sensor de humedad y temperatura con Arduino. Primera parte: El hardware.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.laciudadela.net/content/2010-04-03/sensor-de-humedad-y-temperatura-con-arduino-segunda-parte-firmware&quot;&gt;Sensor de humedad y temperatura con Arduino. Segunda parte: firmware.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El acceso a través del puerto serie resulta inconveniente para el propósito de crear un gadget para el escritorio de Windows 7, por lo que se hace necesario escribir un pequeño programa que nos permita trasladar peticiones HTTP convencionales a peticiones a través del puerto serie. Se ha escrito dicho programa y se ha denominado &lt;em&gt;HttpRelay&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Diagrama de bloques de HttpRelay&quot; src=&quot;/images/07-11/HttpRelay-block-diagram_6.png&quot; alt=&quot;Diagrama de bloques de HttpRelay&quot; width=&quot;270&quot; height=&quot;175&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dicho programa se queda residente como un icono en la barra de notificaciones encargándose de trasladar las peticiones HTTP GET a comandos a través del puerto serie que se haya configurado. De esta forma, podemos comunicarnos con el Arduino a través de HTTP.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;pantalla principal del programa HttpRelay&quot; src=&quot;/images/07-11/http-relay_3.png&quot; alt=&quot;pantalla principal del programa HttpRelay&quot; width=&quot;331&quot; height=&quot;328&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El programa se configura a través de un archivo &lt;em&gt;xml&lt;/em&gt; que indica la URI en la que se debe escuchar y el puerto serie COM al que se delegará la respuesta, así como, la velocidad en bits por segundo a la que se debe utilizar el puerto.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;configuración xml del programa HttpRelay&quot; src=&quot;/images/07-11/image_3_0.png&quot; alt=&quot;configuración xml del programa HttpRelay&quot; width=&quot;298&quot; height=&quot;111&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El programa traslada al puerto serie el parámetro de query llamado ‘q’ por lo que si deseamos obtener mediciones de temperatura y humedad con la configuración anterior, utilizando el comando ‘g’ definido en el firmware, deberemos utilizar la URL: ‘http://localhost:8080/?q=g’&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/image_5.png&quot;&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;image&quot; src=&quot;http://www.laciudadela.net/wp-content/uploads/2007-2011/image_thumb_1_2.png&quot; alt=&quot;image&quot; width=&quot;554&quot; height=&quot;264&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El programa &lt;em&gt;HttpRelay&lt;/em&gt;, escrito en c#, utiliza la clase &lt;a href=&quot;http://msdn.microsoft.com/es-es/library/system.net.httplistener(VS.80).aspx&quot; target=&quot;_blank&quot;&gt;HttpListener&lt;/a&gt; para realizar la escucha en una URL determinada.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/files/HttpRelay.zip&quot;&gt;Código fuente&lt;/a&gt;&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">Este artículo es una continuación de los siguientes: Sensor de humedad y temperatura con Arduino. Primera parte: El hardware. Sensor de humedad y temperatura con Arduino. Segunda parte: firmware. El acceso a través del puerto serie resulta inconveniente para el propósito de crear un gadget para el escritorio de Windows 7, por lo que se hace necesario escribir un pequeño programa que nos permita trasladar peticiones HTTP convencionales a peticiones a través del puerto serie. Se ha escrito dicho programa y se ha denominado HttpRelay. Dicho programa se queda residente como un icono en la barra de notificaciones encargándose de trasladar las peticiones HTTP GET a comandos a través del puerto serie que se haya configurado. De esta forma, podemos comunicarnos con el Arduino a través de HTTP. El programa se configura a través de un archivo xml que indica la URI en la que se debe escuchar y el puerto serie COM al que se delegará la respuesta, así como, la velocidad en bits por segundo a la que se debe utilizar el puerto. El programa traslada al puerto serie el parámetro de query llamado ‘q’ por lo que si deseamos obtener mediciones de temperatura y humedad con la configuración anterior, utilizando el comando ‘g’ definido en el firmware, deberemos utilizar la URL: ‘http://localhost:8080/?q=g’ El programa HttpRelay, escrito en c#, utiliza la clase HttpListener para realizar la escucha en una URL determinada. Código fuente</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/HttpRelay-block-diagram_6.png%22%7D" /></entry><entry><title type="html">Sensor de humedad y temperatura con Arduino. Cuarta parte: Gadget para Windows 7</title><link href="http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-4.html" rel="alternate" type="text/html" title="Sensor de humedad y temperatura con Arduino. Cuarta parte: Gadget para Windows 7" /><published>2010-04-04T00:00:00+02:00</published><updated>2010-04-04T00:00:00+02:00</updated><id>http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-4</id><content type="html" xml:base="http://localhost:4000/2010/04/04/sensor-humedad-temperatura-arduino-4.html">&lt;p&gt;Este artículo es una continuación de los siguientes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.laciudadela.net/content/2010-03-19/sensor-de-humedad-y-temperatura-con-arduino-primera-parte-el-hardware&quot;&gt;Sensor de humedad y temperatura con Arduino. Primera parte: El hardware.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.laciudadela.net/content/2010-04-03/sensor-de-humedad-y-temperatura-con-arduino-segunda-parte-firmware&quot;&gt;Sensor de humedad y temperatura con Arduino. Segunda parte: firmware.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.laciudadela.net/content/2010-04-04/sensor-de-humedad-y-temperatura-con-arduino-tercera-parte-httprelay&quot;&gt;Sensor de humedad y temperatura con Arduino. Tercera parte: HttpRelay.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Utilizando la base desarrollada en artículos anteriores, se construyó un gadget para el escritorio de Windows 7 que nos muestra información sobre la temperatura y la humedad y cuyo aspecto se puede ver en la figura siguiente.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Gadget para Windows 7 para medición de Humedad y Temperatura con Arduino y sensor SHT15&quot; src=&quot;/images/07-11/sht-desktop-detail_3.png&quot; alt=&quot;Gadget para Windows 7 para medición de Humedad y Temperatura con Arduino y sensor SHT15&quot; width=&quot;509&quot; height=&quot;434&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Además del manifiesto que le define, el gadget está compuesto de Html/CSS, JavaScript e imágenes que definen su &lt;em&gt;background&lt;/em&gt;. El siguiente &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/cc163370.aspx&quot; target=&quot;_blank&quot;&gt;artículo que explica como desarrollar un gadget para Windows&lt;/a&gt; resultó muy útil.&lt;/p&gt;

&lt;p&gt;Toda la lógica ha sido implementada en JavaScript utilizando &lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot;&gt;Jquery&lt;/a&gt; y las &lt;a href=&quot;http://code.google.com/intl/es-ES/apis/visualization/documentation/gallery.html&quot; target=&quot;_blank&quot;&gt;APIs de visualización de Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El gadget establece un timer que ejecutará una medición de forma periódica cada minuto utilizando ajax. Si la petición tiene éxito se ejecutará la función &lt;em&gt;measureReceived&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;petición de medicion de temperatura y humedad ajax&quot; src=&quot;/images/07-11/image_3_1.png&quot; alt=&quot;petición de medicion de temperatura y humedad ajax&quot; width=&quot;281&quot; height=&quot;118&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la función &lt;em&gt;measureReceived&lt;/em&gt;, ejecutada después de cada medición, se actualizarán los valores de las medidas, así como del gráfico que representa su historia. También se calcularán y actualizarán los estadísticos valor medio, mínimo y máximo de la humedad y temperatura.&lt;/p&gt;

&lt;p&gt;El código fuente se adjunta al artículo.&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">Este artículo es una continuación de los siguientes: Sensor de humedad y temperatura con Arduino. Primera parte: El hardware. Sensor de humedad y temperatura con Arduino. Segunda parte: firmware. Sensor de humedad y temperatura con Arduino. Tercera parte: HttpRelay. Utilizando la base desarrollada en artículos anteriores, se construyó un gadget para el escritorio de Windows 7 que nos muestra información sobre la temperatura y la humedad y cuyo aspecto se puede ver en la figura siguiente. Además del manifiesto que le define, el gadget está compuesto de Html/CSS, JavaScript e imágenes que definen su background. El siguiente artículo que explica como desarrollar un gadget para Windows resultó muy útil. Toda la lógica ha sido implementada en JavaScript utilizando Jquery y las APIs de visualización de Google. El gadget establece un timer que ejecutará una medición de forma periódica cada minuto utilizando ajax. Si la petición tiene éxito se ejecutará la función measureReceived. En la función measureReceived, ejecutada después de cada medición, se actualizarán los valores de las medidas, así como del gráfico que representa su historia. También se calcularán y actualizarán los estadísticos valor medio, mínimo y máximo de la humedad y temperatura. El código fuente se adjunta al artículo.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/sht-desktop-detail_3.png%22%7D" /></entry><entry><title type="html">Sensor de humedad y temperatura con Arduino. Segunda parte: firmware</title><link href="http://localhost:4000/2010/04/03/sensor-humedad-temperatura-arduino-2.html" rel="alternate" type="text/html" title="Sensor de humedad y temperatura con Arduino. Segunda parte: firmware" /><published>2010-04-03T00:00:00+02:00</published><updated>2010-04-03T00:00:00+02:00</updated><id>http://localhost:4000/2010/04/03/sensor-humedad-temperatura-arduino-2</id><content type="html" xml:base="http://localhost:4000/2010/04/03/sensor-humedad-temperatura-arduino-2.html">&lt;p&gt;En un &lt;a href=&quot;http://www.laciudadela.net/content/2010-03-19/sensor-de-humedad-y-temperatura-con-arduino-primera-parte-el-hardware&quot; target=&quot;_blank&quot;&gt;artículo anterior se describió el hardware&lt;/a&gt;. En este artículo nos centraremos en el programa que se ejecutará en el Arduino, también llamado &lt;em&gt;firmware&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El programa de Arduino que utilizaremos para obtener la medición de temperatura y humedad del sensor SHT15 proporcionará un sencillo interface a través del puerto serie. Dicho programa está basado en el código de &lt;a href=&quot;http://www.glacialwanderer.com/hobbyrobotics/?p=5&quot; target=&quot;_blank&quot;&gt;Hobby robotics&lt;/a&gt;, aunque ha sido fuertemente modificado para adaptarse a nuestras necesidades.&lt;/p&gt;

&lt;p&gt;En el principio del programa se definen las constantes que representan a cada uno de los comandos que utilizaremos del sensor, así como a los pines a los que están conectadas las líneas DATA y SCK del sensor. La función &lt;em&gt;shiftIn&lt;/em&gt; nos permite leer un numero arbitrario de bits del sensor.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - constantes y helpers&quot; src=&quot;/images/07-11/image_3.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - constantes y helpers&quot; width=&quot;437&quot; height=&quot;348&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La función &lt;em&gt;sendCommand&lt;/em&gt; contiene toda la lógica que envía un comando al sensor SHT15 siguiendo el protocolo descrito en el artículo anterior.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - envío de comandos&quot; src=&quot;/images/07-11/image_8_0.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - envío de comandos&quot; width=&quot;588&quot; height=&quot;482&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Después de enviar un comando es necesario esperar unas cuantas decenas de milisegundos a que se realice la medida. Una vez que la medida se ha completado, el sensor avisará poniendo la línea DATA a 0. El esperar el resultado de la medida, es el objetivo de la siguiente función.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - espera de resultados&quot; src=&quot;/images/07-11/image_9.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - espera de resultados&quot; width=&quot;404&quot; height=&quot;399&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por último, la función &lt;em&gt;getResult&lt;/em&gt; obtiene el resultado de la medida del sensor siguiendo el protocolo descrito en el artículo anterior. Dicha medida se obtiene como un entero de 16 bits que será necesario procesar para obtener la medida en las unidades de humedad y temperatura.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - lectura de resultados&quot; src=&quot;/images/07-11/image_12.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - lectura de resultados&quot; width=&quot;563&quot; height=&quot;488&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ese es el objetivo de las siguientes funciones &lt;em&gt;printTemperature&lt;/em&gt; y &lt;em&gt;printHumidity;&lt;/em&gt; envían el comando correspondiente al sensor obteniendo el resultado como un entero de 16 bits, convierten dicho entero a un valor de temperatura en grados centígrados y a un valor de humedad relativa, imprimiendo dichos valores a través del puerto serie.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - impresión de resultados&quot; src=&quot;/images/07-11/image_15.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - impresión de resultados&quot; width=&quot;462&quot; height=&quot;450&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La última parte del sketch de arduino es la configuración que simplemente establecerá el pin SCK como de salida y configurará el puerto serie a 9600 bps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/image_17.png&quot;&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - configuración&quot; src=&quot;/images/07-11/image_thumb_5.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - configuración&quot; width=&quot;278&quot; height=&quot;106&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;y el bucle principal que define una serie de comandos para obtener la medición de la temperatura y la humedad. El comando que utilizaremos en artículos posteriores es el comando ‘g’. Al recibir una ‘g’ en ASCII por el puerto serie, el programa realizara mediciones de la temperatura y de la humedad y las imprimirá por el puerto serie separadas por el carácter ‘&lt;/td&gt;
      &lt;td&gt;’ y finalizadas por ‘rn’.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/image_19.png&quot;&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - bucle principal&quot; src=&quot;/images/07-11/image_thumb_6.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - bucle principal&quot; width=&quot;489&quot; height=&quot;654&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La implementación de dicho programa en el Arduino ya nos permite obtener los valores de temperatura y humedad utilizando un programa de terminal tal y como se muestra en la figura siguiente.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Sensor de humedad y temperatura con arduino y SHT15 - resultados por consola serie&quot; src=&quot;/images/07-11/image_22.png&quot; alt=&quot;Sensor de humedad y temperatura con arduino y SHT15 - resultados por consola serie&quot; width=&quot;545&quot; height=&quot;485&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En un artículo posterior utilizaremos esta base para construir un gadget para el escritorio de Windows 7.&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">En un artículo anterior se describió el hardware. En este artículo nos centraremos en el programa que se ejecutará en el Arduino, también llamado firmware. El programa de Arduino que utilizaremos para obtener la medición de temperatura y humedad del sensor SHT15 proporcionará un sencillo interface a través del puerto serie. Dicho programa está basado en el código de Hobby robotics, aunque ha sido fuertemente modificado para adaptarse a nuestras necesidades. En el principio del programa se definen las constantes que representan a cada uno de los comandos que utilizaremos del sensor, así como a los pines a los que están conectadas las líneas DATA y SCK del sensor. La función shiftIn nos permite leer un numero arbitrario de bits del sensor. La función sendCommand contiene toda la lógica que envía un comando al sensor SHT15 siguiendo el protocolo descrito en el artículo anterior. Después de enviar un comando es necesario esperar unas cuantas decenas de milisegundos a que se realice la medida. Una vez que la medida se ha completado, el sensor avisará poniendo la línea DATA a 0. El esperar el resultado de la medida, es el objetivo de la siguiente función. Por último, la función getResult obtiene el resultado de la medida del sensor siguiendo el protocolo descrito en el artículo anterior. Dicha medida se obtiene como un entero de 16 bits que será necesario procesar para obtener la medida en las unidades de humedad y temperatura. Ese es el objetivo de las siguientes funciones printTemperature y printHumidity; envían el comando correspondiente al sensor obteniendo el resultado como un entero de 16 bits, convierten dicho entero a un valor de temperatura en grados centígrados y a un valor de humedad relativa, imprimiendo dichos valores a través del puerto serie. La última parte del sketch de arduino es la configuración que simplemente establecerá el pin SCK como de salida y configurará el puerto serie a 9600 bps. y el bucle principal que define una serie de comandos para obtener la medición de la temperatura y la humedad. El comando que utilizaremos en artículos posteriores es el comando ‘g’. Al recibir una ‘g’ en ASCII por el puerto serie, el programa realizara mediciones de la temperatura y de la humedad y las imprimirá por el puerto serie separadas por el carácter ‘ ’ y finalizadas por ‘rn’. La implementación de dicho programa en el Arduino ya nos permite obtener los valores de temperatura y humedad utilizando un programa de terminal tal y como se muestra en la figura siguiente. En un artículo posterior utilizaremos esta base para construir un gadget para el escritorio de Windows 7.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/image_22.png%22%7D" /></entry><entry><title type="html">Sensor de humedad y temperatura con Arduino. Primera parte: El hardware</title><link href="http://localhost:4000/2010/03/19/sensor-humedad-temperatura-arduino-1.html" rel="alternate" type="text/html" title="Sensor de humedad y temperatura con Arduino. Primera parte: El hardware" /><published>2010-03-19T00:00:00+01:00</published><updated>2010-03-19T00:00:00+01:00</updated><id>http://localhost:4000/2010/03/19/sensor-humedad-temperatura-arduino-1</id><content type="html" xml:base="http://localhost:4000/2010/03/19/sensor-humedad-temperatura-arduino-1.html">&lt;p&gt;Utilizamos un sensor de temperatura y humedad &lt;a href=&quot;/files/datasheets/SHT1x_datasheet.pdf&quot; target=&quot;_blank&quot;&gt;SHT15&lt;/a&gt; y un Arduino. El interface de datos con el sensor requiere únicamente de 2 pines, un pin de reloj (SCK) y un pin de datos (DATA).&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;esquemático arduino con SHT15&quot; src=&quot;/images/07-11/image_27.png&quot; alt=&quot;esquemático arduino con SHT15&quot; width=&quot;358&quot; height=&quot;374&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El interface con el sensor consiste de lógica estática y por lo tanto no existe una frecuencia de reloj mínima. El pin de datos triestado es utilizado para escribir y leer datos del sensor. Los datos se validan en el pulso de subida del reloj y deben permanecer estables mientras el reloj esté en estado alto.&lt;/p&gt;

&lt;p&gt;En el datasheet del sensor se muestran las frecuencias máximas de operación que soporta el sensor, sin embargo, los comandos para modificar los pins del arduino imponen la suficiente sobrecarga para que en este caso no nos tengamos que preocupar de sobrepasarlas, y por lo tanto, no es necesario introducir ningún retraso a la hora de modificar los pins del interface para operar con el sensor.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;foto de la conexión sensor SHT15 a Arduino&quot; src=&quot;/images/07-11/image_30.png&quot; alt=&quot;foto de la conexión sensor SHT15 a Arduino&quot; width=&quot;507&quot; height=&quot;382&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En las siguientes figuras se muestra una traza del comando para medir la temperatura. El trazo superior de la figura representa el reloj (SCK) y el inferior los datos (DATA). El comando para medir la humedad es muy parecido por lo que solo se ilustrará el de temperatura.&lt;/p&gt;

&lt;p&gt;La secuencia para enviar un comando consiste en poner DATA a 0 mientras SCK es 1, seguido por un pulso de reloj de 1 a 0 y de 0 a 1 para a continuación poner de nuevo DATA a 1 con SCK aún a 1.&lt;/p&gt;

&lt;p&gt;Posteriormente a la secuencia de inicio de comando se envían 3 bits de dirección (que deben ser 000) y 5 bits de comando, que en el caso del comando para medir la temperatura son 00011.&lt;/p&gt;

&lt;p&gt;El sensor indica la correcta recepción del comando estableciendo DATA a 0 durante la parte activa del siguiente pulso del reloj y liberando la línea en la caída de dicho pulso lo cual hace que DATA quede a 1 después del noveno pulso de reloj. A partir de ese momento el sensor realiza la medida, que tardara unas decenas de milisegundos. El sensor avisará de que ha completado la medida estableciendo DATA a 0.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;Traza lógica del envio de un comando al sensor de temperatura y humedad SHT15&quot; src=&quot;/images/07-11/image_13.png&quot; alt=&quot;Traza lógica del envio de un comando al sensor de temperatura y humedad SHT15&quot; width=&quot;452&quot; height=&quot;109&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el momento que DATA vale 0 podemos proceder a leer los datos de la medida realizada por el sensor.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: inline; border: 0px;&quot; title=&quot;traza lógica de la lectura de datos de temperatura sensor SHT15 con arduino&quot; src=&quot;/images/07-11/image_6_0.png&quot; alt=&quot;traza lógica de la lectura de datos de temperatura sensor SHT15 con arduino&quot; width=&quot;488&quot; height=&quot;109&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se lee el primer byte, que en el caso anterior corresponde a 00011000 = 0x18 y se envía un ACK poniendo la línea de datos a cero durante el siguiente pulso de reloj. A continuación se lee el segundo byte correspondiente a 00011010 = 0x1A y en este caso no enviamos un ACK debido a que no vamos a utilizar el CRC que nos podría enviar el sensor como un tercer byte si le diéramos un ACK. El mantener DATA activo después de leer el segundo byte indica al sensor que hemos terminado y le permite pasar a modo SLEEP.&lt;/p&gt;

&lt;p&gt;Después de leer el valor hexadecimal 0x181A que equivale a 6170 obtenemos la temperatura mediante la siguiente fórmula: T= –40.1 + 6170 * 0.01 = 21.6ºC&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">Utilizamos un sensor de temperatura y humedad SHT15 y un Arduino. El interface de datos con el sensor requiere únicamente de 2 pines, un pin de reloj (SCK) y un pin de datos (DATA). El interface con el sensor consiste de lógica estática y por lo tanto no existe una frecuencia de reloj mínima. El pin de datos triestado es utilizado para escribir y leer datos del sensor. Los datos se validan en el pulso de subida del reloj y deben permanecer estables mientras el reloj esté en estado alto. En el datasheet del sensor se muestran las frecuencias máximas de operación que soporta el sensor, sin embargo, los comandos para modificar los pins del arduino imponen la suficiente sobrecarga para que en este caso no nos tengamos que preocupar de sobrepasarlas, y por lo tanto, no es necesario introducir ningún retraso a la hora de modificar los pins del interface para operar con el sensor. En las siguientes figuras se muestra una traza del comando para medir la temperatura. El trazo superior de la figura representa el reloj (SCK) y el inferior los datos (DATA). El comando para medir la humedad es muy parecido por lo que solo se ilustrará el de temperatura. La secuencia para enviar un comando consiste en poner DATA a 0 mientras SCK es 1, seguido por un pulso de reloj de 1 a 0 y de 0 a 1 para a continuación poner de nuevo DATA a 1 con SCK aún a 1. Posteriormente a la secuencia de inicio de comando se envían 3 bits de dirección (que deben ser 000) y 5 bits de comando, que en el caso del comando para medir la temperatura son 00011. El sensor indica la correcta recepción del comando estableciendo DATA a 0 durante la parte activa del siguiente pulso del reloj y liberando la línea en la caída de dicho pulso lo cual hace que DATA quede a 1 después del noveno pulso de reloj. A partir de ese momento el sensor realiza la medida, que tardara unas decenas de milisegundos. El sensor avisará de que ha completado la medida estableciendo DATA a 0. En el momento que DATA vale 0 podemos proceder a leer los datos de la medida realizada por el sensor. Se lee el primer byte, que en el caso anterior corresponde a 00011000 = 0x18 y se envía un ACK poniendo la línea de datos a cero durante el siguiente pulso de reloj. A continuación se lee el segundo byte correspondiente a 00011010 = 0x1A y en este caso no enviamos un ACK debido a que no vamos a utilizar el CRC que nos podría enviar el sensor como un tercer byte si le diéramos un ACK. El mantener DATA activo después de leer el segundo byte indica al sensor que hemos terminado y le permite pasar a modo SLEEP. Después de leer el valor hexadecimal 0x181A que equivale a 6170 obtenemos la temperatura mediante la siguiente fórmula: T= –40.1 + 6170 * 0.01 = 21.6ºC</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/image_30.png%22%7D" /></entry><entry><title type="html">Control de led RGB con arduino</title><link href="http://localhost:4000/2010/01/16/control-led-rgb-arduino.html" rel="alternate" type="text/html" title="Control de led RGB con arduino" /><published>2010-01-16T00:00:00+01:00</published><updated>2010-01-16T00:00:00+01:00</updated><id>http://localhost:4000/2010/01/16/control-led-rgb-arduino</id><content type="html" xml:base="http://localhost:4000/2010/01/16/control-led-rgb-arduino.html">&lt;p&gt;El modelo de &lt;a href=&quot;http://www.dealextreme.com/details.dx/sku.20999&quot; target=&quot;_blank&quot;&gt;led RGB utilizado&lt;/a&gt; teóricamente soporta hasta 5W y proporciona 70 lúmenes, sin embargo, en el circuito implementado, se controlará a una potencia mucho menor con una corriente máxima aproximada por color de 60ma. Aún así, esa corriente es demasiada para los puertos del arduino, por lo que se hace necesario intercalar un circuito controlador que soporte corrientes de esa magnitud.&lt;/p&gt;

&lt;p&gt;El circuito controlador elegido es el chip &lt;a href=&quot;/files/ULN2003AN.pdf&quot; target=&quot;_blank&quot;&gt;ULN2003AN&lt;/a&gt; que utilizamos a modo de relé para encender y apagar cada led.&lt;/p&gt;

&lt;p&gt;El led tiene cuatro puertos, un ánodo común y un cátodo para cada uno de los colores: rojo, verde y azul. Al combinarse estos colores en distintas proporciones podemos crear la sensación de estar viendo casi cualquier color.&lt;/p&gt;

&lt;p&gt;El esquema de circuito se muestra en la siguiente figura:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/esquema_2.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;esquema para el control de led rgb utilizando arduino&quot; src=&quot;/images/07-11/esquema_thumb.png&quot; border=&quot;0&quot; alt=&quot;esquema para el control de led rgb utilizando arduino&quot; width=&quot;417&quot; height=&quot;484&quot; /&gt;&lt;/a&gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/foto%20control%20led%20rgb%20con%20arduino_2.jpg&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;foto control led rgb con arduino&quot; src=&quot;/images/07-11/foto%20control%20led%20rgb%20con%20arduino_thumb.jpg&quot; border=&quot;0&quot; alt=&quot;foto control led rgb con arduino&quot; width=&quot;429&quot; height=&quot;323&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El sketch Arduino le programa para recibir mensajes de cambio de color del led vía el puerto serie en un formato ‘COLOR R G B’. Una vez recibido el mensaje utiliza la función analogWrite para controlar la corriente que circulara cada led &lt;a href=&quot;http://es.wikipedia.org/wiki/Modulaci%C3%B3n_por_ancho_de_pulsos&quot; target=&quot;_blank&quot;&gt;vía modulación de anchura de pulso (PWM)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/07-11/image_4_1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px&quot; title=&quot;sketch en arduino para el control de leds rgb&quot; src=&quot;/images/07-11/image_thumb_1_1.png&quot; border=&quot;0&quot; alt=&quot;sketch en arduino para el control de leds rgb&quot; width=&quot;470&quot; height=&quot;712&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente se realizo un programa en .NET que permite especificar el color del led de una forma amigable. El siguiente video muestra el resultado:&lt;/p&gt;

&lt;div class=&quot;flex-video&quot;&gt;
  &lt;iframe id=&quot;ytplayer&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://youtube.com/embed//DIfRKhk26TY&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/files/control_de_led_RGB.zip&quot;&gt;Código fuente&lt;/a&gt;&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">El modelo de led RGB utilizado teóricamente soporta hasta 5W y proporciona 70 lúmenes, sin embargo, en el circuito implementado, se controlará a una potencia mucho menor con una corriente máxima aproximada por color de 60ma. Aún así, esa corriente es demasiada para los puertos del arduino, por lo que se hace necesario intercalar un circuito controlador que soporte corrientes de esa magnitud. El circuito controlador elegido es el chip ULN2003AN que utilizamos a modo de relé para encender y apagar cada led. El led tiene cuatro puertos, un ánodo común y un cátodo para cada uno de los colores: rojo, verde y azul. Al combinarse estos colores en distintas proporciones podemos crear la sensación de estar viendo casi cualquier color. El esquema de circuito se muestra en la siguiente figura: &amp;lt; El sketch Arduino le programa para recibir mensajes de cambio de color del led vía el puerto serie en un formato ‘COLOR R G B’. Una vez recibido el mensaje utiliza la función analogWrite para controlar la corriente que circulara cada led vía modulación de anchura de pulso (PWM). Posteriormente se realizo un programa en .NET que permite especificar el color del led de una forma amigable. El siguiente video muestra el resultado: Código fuente</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/esquema_thumb.png%22%7D" /></entry><entry><title type="html">Control de servomotores con Arduino y WPF</title><link href="http://localhost:4000/2009/12/20/control-servomotores-arduino-wpf.html" rel="alternate" type="text/html" title="Control de servomotores con Arduino y WPF" /><published>2009-12-20T00:00:00+01:00</published><updated>2009-12-20T00:00:00+01:00</updated><id>http://localhost:4000/2009/12/20/control-servomotores-arduino-wpf</id><content type="html" xml:base="http://localhost:4000/2009/12/20/control-servomotores-arduino-wpf.html">&lt;p&gt;Los &lt;a href=&quot;http://es.wikipedia.org/wiki/Servomotor_de_modelismo&quot; target=&quot;_blank&quot;&gt;servomotores&lt;/a&gt; son motores que integran una circuitería de control que permiten posicionar su eje dentro de un rango. Típicamente los servomotores permiten posicionar el eje con precisión dentro de un rango angular de 0 a 180 grados aproximadamente.&lt;/p&gt;
&lt;p&gt;Constan de tres señales de entrada: alimentación, referencia, y señal de control. Utilizando la señal de control se puede posicionar el motor dentro del rango. El control se realiza a través de pulsos de duración determinada de la señal de control. Por ejemplo, para posicionar un servomotor controlado con pulsos de 1msg a 2msg de rango 0-180 grados a 90 grados necesitaríamos suministrar a la señal de control un pulso de 1.5msg de duración.&lt;/p&gt;
&lt;p&gt;Se conecta el control del servomotor a la salida digital número 9 del Arduino que programaremos para recibir mensajes de posicionamiento a través del puerto serie, interpretarles y posicionar el servomotor. Para ello utilizaremos las librerías de control de servos (Servo) y de delimitación de mensajes del puerto serie (Messenger).&lt;/p&gt;
&lt;p&gt;La inicialización del programa del Arduino se muestra en la siguiente figura donde simplemente indicamos a la librería de control de servos que se utilizará el pin 9 para el control, inicializamos el puerto serie a 115200 baudios e inicializamos la librería de procesado de mensajes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/07-11/image_2.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;inicialización control servomotor arduino&quot; src=&quot;/images/07-11/image_thumb_2.png&quot; border=&quot;0&quot; alt=&quot;inicialización control servomotor arduino&quot; width=&quot;255&quot; height=&quot;230&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dentro del bucle principal simplemente se leerá el puerto serie esperando mensajes de la forma ‘SERVO n’ donde n es un número de 0 a 178 que indica el ángulo en grados donde se desea posicionar el motor. Una vez interpretado el mensaje satisfactoriamente se posicionara el servomotor y se añadirá un pequeño retraso de 15msg que permita al servomotor posicionarse antes de recibir otra orden.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/07-11/image_4_0.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;bucle principal control servomotor arduino&quot; src=&quot;/images/07-11/image_thumb_1_0.png&quot; border=&quot;0&quot; alt=&quot;bucle principal control servomotor arduino&quot; width=&quot;489&quot; height=&quot;401&quot; /&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Para la aplicación WPF diseñaremos una clase con una única propiedad que permita establecer la posición del servo. Haremos que dicha propiedad sea ‘Bindable’ para poderla enlazar de forma natural con los controles de interface gráfico.&lt;/p&gt;
&lt;p&gt;La parte principal de dicha clase se muestra en la figura siguiente:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/07-11/image_6.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;clase controladora de servomotor en .net&quot; src=&quot;/images/07-11/image_thumb_2_0.png&quot; border=&quot;0&quot; alt=&quot;clase controladora de servomotor en .net&quot; width=&quot;543&quot; height=&quot;346&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;y se creará un interface gráfico para el control en XAML enlazando a dicha propiedad de la siguiente manera:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/07-11/image_8.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px&quot; title=&quot;xaml para el interface gráfico del control de servomotores con arduino&quot; src=&quot;/images/07-11/image_thumb_3.png&quot; border=&quot;0&quot; alt=&quot;xaml para el interface gráfico del control de servomotores con arduino&quot; width=&quot;518&quot; height=&quot;226&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El resultado se puede ver en el siguiente video.&lt;/p&gt;

&lt;div class=&quot;flex-video&quot;&gt;
  &lt;iframe id=&quot;ytplayer&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://youtube.com/embed/2b9s11eihog&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/files/ServoControlSlider.zip&quot;&gt;Código fuente&lt;/a&gt;&lt;/p&gt;</content><author><name>peancor</name></author><summary type="html">Los servomotores son motores que integran una circuitería de control que permiten posicionar su eje dentro de un rango. Típicamente los servomotores permiten posicionar el eje con precisión dentro de un rango angular de 0 a 180 grados aproximadamente. Constan de tres señales de entrada: alimentación, referencia, y señal de control. Utilizando la señal de control se puede posicionar el motor dentro del rango. El control se realiza a través de pulsos de duración determinada de la señal de control. Por ejemplo, para posicionar un servomotor controlado con pulsos de 1msg a 2msg de rango 0-180 grados a 90 grados necesitaríamos suministrar a la señal de control un pulso de 1.5msg de duración. Se conecta el control del servomotor a la salida digital número 9 del Arduino que programaremos para recibir mensajes de posicionamiento a través del puerto serie, interpretarles y posicionar el servomotor. Para ello utilizaremos las librerías de control de servos (Servo) y de delimitación de mensajes del puerto serie (Messenger). La inicialización del programa del Arduino se muestra en la siguiente figura donde simplemente indicamos a la librería de control de servos que se utilizará el pin 9 para el control, inicializamos el puerto serie a 115200 baudios e inicializamos la librería de procesado de mensajes. Dentro del bucle principal simplemente se leerá el puerto serie esperando mensajes de la forma ‘SERVO n’ donde n es un número de 0 a 178 que indica el ángulo en grados donde se desea posicionar el motor. Una vez interpretado el mensaje satisfactoriamente se posicionara el servomotor y se añadirá un pequeño retraso de 15msg que permita al servomotor posicionarse antes de recibir otra orden. &amp;nbsp; Para la aplicación WPF diseñaremos una clase con una única propiedad que permita establecer la posición del servo. Haremos que dicha propiedad sea ‘Bindable’ para poderla enlazar de forma natural con los controles de interface gráfico. La parte principal de dicha clase se muestra en la figura siguiente: y se creará un interface gráfico para el control en XAML enlazando a dicha propiedad de la siguiente manera: El resultado se puede ver en el siguiente video. Código fuente</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22thumb%22=%3E%2207-11/image_2.png%22%7D" /></entry></feed>